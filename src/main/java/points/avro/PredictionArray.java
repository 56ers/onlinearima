/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package points.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PredictionArray extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3054111042187636518L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PredictionArray\",\"namespace\":\"points.avro\",\"fields\":[{\"name\":\"predictedpoints\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AvroPoint\",\"namespace\":\"points\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":[\"null\",\"double\"]},{\"name\":\"heading\",\"type\":[\"null\",\"double\"]},{\"name\":\"error\",\"type\":[\"null\",\"boolean\"]}]}},\"namespace\":\"points.avro_point\"},{\"name\":\"prediction\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<points.AvroPoint> predictedpoints;
  @Deprecated public boolean prediction;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PredictionArray() {}

  /**
   * All-args constructor.
   * @param predictedpoints The new value for predictedpoints
   * @param prediction The new value for prediction
   */
  public PredictionArray(java.util.List<points.AvroPoint> predictedpoints, java.lang.Boolean prediction) {
    this.predictedpoints = predictedpoints;
    this.prediction = prediction;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return predictedpoints;
    case 1: return prediction;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: predictedpoints = (java.util.List<points.AvroPoint>)value$; break;
    case 1: prediction = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'predictedpoints' field.
   * @return The value of the 'predictedpoints' field.
   */
  public java.util.List<points.AvroPoint> getPredictedpoints() {
    return predictedpoints;
  }

  /**
   * Sets the value of the 'predictedpoints' field.
   * @param value the value to set.
   */
  public void setPredictedpoints(java.util.List<points.AvroPoint> value) {
    this.predictedpoints = value;
  }

  /**
   * Gets the value of the 'prediction' field.
   * @return The value of the 'prediction' field.
   */
  public java.lang.Boolean getPrediction() {
    return prediction;
  }

  /**
   * Sets the value of the 'prediction' field.
   * @param value the value to set.
   */
  public void setPrediction(java.lang.Boolean value) {
    this.prediction = value;
  }

  /**
   * Creates a new PredictionArray RecordBuilder.
   * @return A new PredictionArray RecordBuilder
   */
  public static points.avro.PredictionArray.Builder newBuilder() {
    return new points.avro.PredictionArray.Builder();
  }

  /**
   * Creates a new PredictionArray RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PredictionArray RecordBuilder
   */
  public static points.avro.PredictionArray.Builder newBuilder(points.avro.PredictionArray.Builder other) {
    return new points.avro.PredictionArray.Builder(other);
  }

  /**
   * Creates a new PredictionArray RecordBuilder by copying an existing PredictionArray instance.
   * @param other The existing instance to copy.
   * @return A new PredictionArray RecordBuilder
   */
  public static points.avro.PredictionArray.Builder newBuilder(points.avro.PredictionArray other) {
    return new points.avro.PredictionArray.Builder(other);
  }

  /**
   * RecordBuilder for PredictionArray instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PredictionArray>
    implements org.apache.avro.data.RecordBuilder<PredictionArray> {

    private java.util.List<points.AvroPoint> predictedpoints;
    private boolean prediction;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(points.avro.PredictionArray.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.predictedpoints)) {
        this.predictedpoints = data().deepCopy(fields()[0].schema(), other.predictedpoints);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.prediction)) {
        this.prediction = data().deepCopy(fields()[1].schema(), other.prediction);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PredictionArray instance
     * @param other The existing instance to copy.
     */
    private Builder(points.avro.PredictionArray other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.predictedpoints)) {
        this.predictedpoints = data().deepCopy(fields()[0].schema(), other.predictedpoints);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.prediction)) {
        this.prediction = data().deepCopy(fields()[1].schema(), other.prediction);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'predictedpoints' field.
      * @return The value.
      */
    public java.util.List<points.AvroPoint> getPredictedpoints() {
      return predictedpoints;
    }

    /**
      * Sets the value of the 'predictedpoints' field.
      * @param value The value of 'predictedpoints'.
      * @return This builder.
      */
    public points.avro.PredictionArray.Builder setPredictedpoints(java.util.List<points.AvroPoint> value) {
      validate(fields()[0], value);
      this.predictedpoints = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'predictedpoints' field has been set.
      * @return True if the 'predictedpoints' field has been set, false otherwise.
      */
    public boolean hasPredictedpoints() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'predictedpoints' field.
      * @return This builder.
      */
    public points.avro.PredictionArray.Builder clearPredictedpoints() {
      predictedpoints = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'prediction' field.
      * @return The value.
      */
    public java.lang.Boolean getPrediction() {
      return prediction;
    }

    /**
      * Sets the value of the 'prediction' field.
      * @param value The value of 'prediction'.
      * @return This builder.
      */
    public points.avro.PredictionArray.Builder setPrediction(boolean value) {
      validate(fields()[1], value);
      this.prediction = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'prediction' field has been set.
      * @return True if the 'prediction' field has been set, false otherwise.
      */
    public boolean hasPrediction() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'prediction' field.
      * @return This builder.
      */
    public points.avro.PredictionArray.Builder clearPrediction() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public PredictionArray build() {
      try {
        PredictionArray record = new PredictionArray();
        record.predictedpoints = fieldSetFlags()[0] ? this.predictedpoints : (java.util.List<points.AvroPoint>) defaultValue(fields()[0]);
        record.prediction = fieldSetFlags()[1] ? this.prediction : (java.lang.Boolean) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
