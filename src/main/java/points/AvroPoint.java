/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package points;

import org.apache.avro.specific.SpecificData;

import java.io.Serializable;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroPoint extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, PointST, Serializable {
  private static final long serialVersionUID = -5999665025604998136L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroPoint\",\"namespace\":\"points\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":[\"null\",\"double\"]},{\"name\":\"heading\",\"type\":[\"null\",\"double\"]},{\"name\":\"error\",\"type\":[\"null\",\"boolean\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public long timestamp;
  @Deprecated public double longitude;
  @Deprecated public double latitude;
  @Deprecated public java.lang.Double speed;
  @Deprecated public java.lang.Double heading;
  @Deprecated public java.lang.Boolean error;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroPoint() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param timestamp The new value for timestamp
   * @param longitude The new value for longitude
   * @param latitude The new value for latitude
   * @param speed The new value for speed
   * @param heading The new value for heading
   * @param error The new value for error
   */
  public AvroPoint(java.lang.Integer id, java.lang.Long timestamp, java.lang.Double longitude, java.lang.Double latitude, java.lang.Double speed, java.lang.Double heading, java.lang.Boolean error) {
    this.id = id;
    this.timestamp = timestamp;
    this.longitude = longitude;
    this.latitude = latitude;
    this.speed = speed;
    this.heading = heading;
    this.error = error;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return timestamp;
    case 2: return longitude;
    case 3: return latitude;
    case 4: return speed;
    case 5: return heading;
    case 6: return error;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: timestamp = (java.lang.Long)value$; break;
    case 2: longitude = (java.lang.Double)value$; break;
    case 3: latitude = (java.lang.Double)value$; break;
    case 4: speed = (java.lang.Double)value$; break;
    case 5: heading = (java.lang.Double)value$; break;
    case 6: error = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public java.lang.Double getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'heading' field.
   * @return The value of the 'heading' field.
   */
  public java.lang.Double getHeading() {
    return heading;
  }

  /**
   * Sets the value of the 'heading' field.
   * @param value the value to set.
   */
  public void setHeading(java.lang.Double value) {
    this.heading = value;
  }

  /**
   * Gets the value of the 'error' field.
   * @return The value of the 'error' field.
   */
  public java.lang.Boolean getError() {
    return error;
  }

  /**
   * Sets the value of the 'error' field.
   * @param value the value to set.
   */
  public void setError(java.lang.Boolean value) {
    this.error = value;
  }

  /**
   * Creates a new AvroPoint RecordBuilder.
   * @return A new AvroPoint RecordBuilder
   */
  public static points.AvroPoint.Builder newBuilder() {
    return new points.AvroPoint.Builder();
  }

  /**
   * Creates a new AvroPoint RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroPoint RecordBuilder
   */
  public static points.AvroPoint.Builder newBuilder(points.AvroPoint.Builder other) {
    return new points.AvroPoint.Builder(other);
  }

  /**
   * Creates a new AvroPoint RecordBuilder by copying an existing AvroPoint instance.
   * @param other The existing instance to copy.
   * @return A new AvroPoint RecordBuilder
   */
  public static points.AvroPoint.Builder newBuilder(points.AvroPoint other) {
    return new points.AvroPoint.Builder(other);
  }

  /**
   * RecordBuilder for AvroPoint instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroPoint>
    implements org.apache.avro.data.RecordBuilder<AvroPoint> {

    private int id;
    private long timestamp;
    private double longitude;
    private double latitude;
    private java.lang.Double speed;
    private java.lang.Double heading;
    private java.lang.Boolean error;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(points.AvroPoint.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.speed)) {
        this.speed = data().deepCopy(fields()[4].schema(), other.speed);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.heading)) {
        this.heading = data().deepCopy(fields()[5].schema(), other.heading);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.error)) {
        this.error = data().deepCopy(fields()[6].schema(), other.error);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroPoint instance
     * @param other The existing instance to copy.
     */
    private Builder(points.AvroPoint other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.speed)) {
        this.speed = data().deepCopy(fields()[4].schema(), other.speed);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.heading)) {
        this.heading = data().deepCopy(fields()[5].schema(), other.heading);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.error)) {
        this.error = data().deepCopy(fields()[6].schema(), other.error);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public points.AvroPoint.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public points.AvroPoint.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public points.AvroPoint.Builder setTimestamp(long value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public points.AvroPoint.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public points.AvroPoint.Builder setLongitude(double value) {
      validate(fields()[2], value);
      this.longitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public points.AvroPoint.Builder clearLongitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public points.AvroPoint.Builder setLatitude(double value) {
      validate(fields()[3], value);
      this.latitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public points.AvroPoint.Builder clearLatitude() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public java.lang.Double getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public points.AvroPoint.Builder setSpeed(java.lang.Double value) {
      validate(fields()[4], value);
      this.speed = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public points.AvroPoint.Builder clearSpeed() {
      speed = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'heading' field.
      * @return The value.
      */
    public java.lang.Double getHeading() {
      return heading;
    }

    /**
      * Sets the value of the 'heading' field.
      * @param value The value of 'heading'.
      * @return This builder.
      */
    public points.AvroPoint.Builder setHeading(java.lang.Double value) {
      validate(fields()[5], value);
      this.heading = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'heading' field has been set.
      * @return True if the 'heading' field has been set, false otherwise.
      */
    public boolean hasHeading() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'heading' field.
      * @return This builder.
      */
    public points.AvroPoint.Builder clearHeading() {
      heading = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'error' field.
      * @return The value.
      */
    public java.lang.Boolean getError() {
      return error;
    }

    /**
      * Sets the value of the 'error' field.
      * @param value The value of 'error'.
      * @return This builder.
      */
    public points.AvroPoint.Builder setError(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.error = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'error' field has been set.
      * @return True if the 'error' field has been set, false otherwise.
      */
    public boolean hasError() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'error' field.
      * @return This builder.
      */
    public points.AvroPoint.Builder clearError() {
      error = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public AvroPoint build() {
      try {
        AvroPoint record = new AvroPoint();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.longitude = fieldSetFlags()[2] ? this.longitude : (java.lang.Double) defaultValue(fields()[2]);
        record.latitude = fieldSetFlags()[3] ? this.latitude : (java.lang.Double) defaultValue(fields()[3]);
        record.speed = fieldSetFlags()[4] ? this.speed : (java.lang.Double) defaultValue(fields()[4]);
        record.heading = fieldSetFlags()[5] ? this.heading : (java.lang.Double) defaultValue(fields()[5]);
        record.error = fieldSetFlags()[6] ? this.error : (java.lang.Boolean) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
